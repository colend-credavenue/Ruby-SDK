=begin
#Allcloud (Allcloud)

## Integration Document  The following are the endpoints to be called during and pre/post disbursement state of a loan.  ## Authentication  Authentication details and host will be shared privately.  ## Workflow  **Create Loan** is the initial endpoint to be called to create a loan. Loan will be processed in the background and the status of loan will be provided through the configured Webhook. However, the client can also poll the server via the **Get Loan Details** endpoint to know the loan's status(**Get Loan Details** is rate throttled and polling this API will be restricted). Loan's shall be considered rejected if proper response is not available within 10minutes.  All other endpoints are self-explanatory and can be retried upto 3 times before marking as failure.  ## Allowed Links  All Link attributes should contain 1. Accessible File Link URL which can be Public/Expiry URL/Whitelisted File Server Link(Write to tech.colending@credavenue.com for obtaining our IP address to whitelist) 2. File Link URL with Header Authentication (Header values should be shared with tech.colending@credavenue.com)  ## Allowed Fields Length <table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">  <colgroup>  <col  class=\"org-left\" />  <col  class=\"org-left\" />  </colgroup> <thead> <tr> <th scope=\"col\" class=\"org-left\">Data Type</th> <th scope=\"col\" class=\"org-left\">Max Length</th> </tr> </thead>  <tbody> <tr> <td class=\"org-left\">String</td> <td class=\"org-left\">65,535 bytes</td> </tr>  <tr> <td class=\"org-left\">Float</td> <td class=\"org-left\">8 bytes</td> </tr>  <tr> <td class=\"org-left\">Integer</td> <td class=\"org-left\">4 bytes</td> </tr>  <tr> <td class=\"org-left\">Date</td> <td class=\"org-left\">10 characters</td> </tr>  </tbody> </table>  # Webhooks  Webhooks can be configured for the below events  1. Loan status change      Response Payload :      {         \"product_id\": \"\",         \"client_loan_id\": \"\",         \"principal_amount\": \"\",         \"interest_rate\": \"\",         \"tenure\": \"\",         \"tenure_frequency\": \"MONTHLY\",         \"cibil_score\": \"\",         \"purpose\": \"\",         \"repayment_frequency\":\"\",         \"number_of_repayments\": \"\",         \"status\": \"\",         \"principal_outstanding\": \"\",         \"reject_reason\": \"\"     }          Statuses : ['new', 'approved', 'rejected', 'agreement_signed', 'dropped', 'disbursement_ready', 'disbursed', 'matured', 'partner_settled']     2. Loan disbursement details (Disbursed through razorpay)      Callback Payload:      {         \"client_loan_id\":\"\",         \"status\":\"borrower_disbursed\",         \"disbursed_date\":\"\",         \"utr_number\":\"\",         \"disbursement_type\":\"\",         \"payment_reversed\": \"TRUE/FALSE\",         \"disbursement_amount\":\"\",         \"investor_disbursed_amount\": \"\",         \"partner_disbursed_amount\": \"\",         \"differential_interest\":\"\",         \"investor_differential_interest\":\"\",         \"partner_differential_interest\":\"\",         \"differential_days\":\"\",         \"interest_start_date\":\"\",         \"investor_processing_fee\":\"\",         \"partner_processing_fee\":\"\",         \"investor_stamp_duty\":\"\",         \"partner_stamp_duty\":\"\",         \"investor_documentation_charges\":\"\",         \"partner_documentation_charges\":\"\"     }  Provide the following details to configure the webhooks 1. callback URL 2. authentication for the callback URL (header authentication)    # Validations  **PAN**  - **Example**: ABGPA1232P - **Sequence**: First five digits will be alpha, next four will be Numerical and again last single digit will be alpha  **GSTIN**  - **Example**: 33AAACT2727Q1ZV - **Sequence**: First two digits is Numerical, Next is PAN sequence as specified above, again thirteenth digit will be numerical, fourteenth digit is alpha, last digit will be alpha or numerical  **CIN**  - **Example**: U65929TN2017PTC117196 - **Sequence**: First digit is Alpha, next 5 numeric digits, next two alpha, next set of 4 numeric digits, Next 3 alpha, last 6 numeric digits  **PASSPORT**  - **Example**: A2096457 - **Sequence**: Total 8 digits, first digit is Alpha, remaining digits are numerical  **AADHAR NO**  - The standard 12 digits numerical.  **MOBILE NO**  - **Sequence**: 10 numerical digits  **IFSC CODE**  - **Example**: PUNB0596600 - **Sequence**: First four alpha, next fifth digit is 0 (zero) always and last six digit is alpha/numeric. Totally 11 digits.  **PIN CODE**  - 6 numerical digits

OpenAPI spec version: 0.0.1
Contact: support@colending.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module Colending
  # Refer table BusinessData for attributes
  class ResponseCreateTrancheBusinessData
    # PAN number of business
    attr_accessor :business_pan_number

    # PAN image of business
    attr_accessor :business_pan_link

    # PAN image password of business
    attr_accessor :business_pan_link_password

    # Registration number of the business
    attr_accessor :business_rc_number

    # Image of the RC
    attr_accessor :business_rc_link

    # Image password of the RC
    attr_accessor :business_rc_link_password

    # Business GST number
    attr_accessor :business_gst_number

    # Business GST image
    attr_accessor :business_gst_copy_link

    # Business GST image password
    attr_accessor :business_gst_copy_link_password

    # Business Udyog Aadhar Number
    attr_accessor :business_udyog_aadhar_number

    # Business Udyog Aadhar Document
    attr_accessor :business_udyog_aadhar_link

    # Business Udyog Aadhar Document Password
    attr_accessor :business_udyog_aadhar_link_password

    # Small scall industries registration number
    attr_accessor :business_ssi_number

    # Small scall industries registration document
    attr_accessor :business_ssi_link

    # Small scall industries registration document password
    attr_accessor :business_ssi_link_password

    # Shop establishment number
    attr_accessor :business_shops_est_number

    # Shop establishment document
    attr_accessor :business_shops_est_link

    # Shop establishment document password
    attr_accessor :business_shops_est_link_password

    # Factory riegistration number
    attr_accessor :business_factory_regn_number

    # Factory riegistration document
    attr_accessor :business_factory_regn_link

    # Factory riegistration document password
    attr_accessor :business_factory_regn_link_password

    # Trade license number
    attr_accessor :business_trade_license_number

    # Trade license document
    attr_accessor :business_trade_license_link

    # Trade license document password
    attr_accessor :business_trade_license_link_password

    # Business place photo image
    attr_accessor :business_place_photo_link

    # Business place photo image
    attr_accessor :business_place_photo_link_password

    # Business continuity proof document
    attr_accessor :business_continuity_proof_link

    # Business continuity proof document password
    attr_accessor :business_continuity_proof_link_password

    # any other adddress proof number
    attr_accessor :other_business_address_proof_number

    # any other adddress proof image
    attr_accessor :other_business_address_proof_link

    # any other adddress proof image password
    attr_accessor :other_business_address_proof_link_password

    # Number of authorized person for business
    attr_accessor :no_of_business_authorised_persons

    attr_accessor :partnership_detail

    attr_accessor :private_entity_detail

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'business_pan_number' => :'business_pan_number',
        :'business_pan_link' => :'business_pan_link',
        :'business_pan_link_password' => :'business_pan_link_password',
        :'business_rc_number' => :'business_rc_number',
        :'business_rc_link' => :'business_rc_link',
        :'business_rc_link_password' => :'business_rc_link_password',
        :'business_gst_number' => :'business_gst_number',
        :'business_gst_copy_link' => :'business_gst_copy_link',
        :'business_gst_copy_link_password' => :'business_gst_copy_link_password',
        :'business_udyog_aadhar_number' => :'business_udyog_aadhar_number',
        :'business_udyog_aadhar_link' => :'business_udyog_aadhar_link',
        :'business_udyog_aadhar_link_password' => :'business_udyog_aadhar_link_password',
        :'business_ssi_number' => :'business_ssi_number',
        :'business_ssi_link' => :'business_ssi_link',
        :'business_ssi_link_password' => :'business_ssi_link_password',
        :'business_shops_est_number' => :'business_shops_est_number',
        :'business_shops_est_link' => :'business_shops_est_link',
        :'business_shops_est_link_password' => :'business_shops_est_link_password',
        :'business_factory_regn_number' => :'business_factory_regn_number',
        :'business_factory_regn_link' => :'business_factory_regn_link',
        :'business_factory_regn_link_password' => :'business_factory_regn_link_password',
        :'business_trade_license_number' => :'business_trade_license_number',
        :'business_trade_license_link' => :'business_trade_license_link',
        :'business_trade_license_link_password' => :'business_trade_license_link_password',
        :'business_place_photo_link' => :'business_place_photo_link',
        :'business_place_photo_link_password' => :'business_place_photo_link_password',
        :'business_continuity_proof_link' => :'business_continuity_proof_link',
        :'business_continuity_proof_link_password' => :'business_continuity_proof_link_password',
        :'other_business_address_proof_number' => :'other_business_address_proof_number',
        :'other_business_address_proof_link' => :'other_business_address_proof_link',
        :'other_business_address_proof_link_password' => :'other_business_address_proof_link_password',
        :'no_of_business_authorised_persons' => :'no_of_business_authorised_persons',
        :'partnership_detail' => :'partnership_detail',
        :'private_entity_detail' => :'private_entity_detail'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'business_pan_number' => :'Object',
        :'business_pan_link' => :'Object',
        :'business_pan_link_password' => :'Object',
        :'business_rc_number' => :'Object',
        :'business_rc_link' => :'Object',
        :'business_rc_link_password' => :'Object',
        :'business_gst_number' => :'Object',
        :'business_gst_copy_link' => :'Object',
        :'business_gst_copy_link_password' => :'Object',
        :'business_udyog_aadhar_number' => :'Object',
        :'business_udyog_aadhar_link' => :'Object',
        :'business_udyog_aadhar_link_password' => :'Object',
        :'business_ssi_number' => :'Object',
        :'business_ssi_link' => :'Object',
        :'business_ssi_link_password' => :'Object',
        :'business_shops_est_number' => :'Object',
        :'business_shops_est_link' => :'Object',
        :'business_shops_est_link_password' => :'Object',
        :'business_factory_regn_number' => :'Object',
        :'business_factory_regn_link' => :'Object',
        :'business_factory_regn_link_password' => :'Object',
        :'business_trade_license_number' => :'Object',
        :'business_trade_license_link' => :'Object',
        :'business_trade_license_link_password' => :'Object',
        :'business_place_photo_link' => :'Object',
        :'business_place_photo_link_password' => :'Object',
        :'business_continuity_proof_link' => :'Object',
        :'business_continuity_proof_link_password' => :'Object',
        :'other_business_address_proof_number' => :'Object',
        :'other_business_address_proof_link' => :'Object',
        :'other_business_address_proof_link_password' => :'Object',
        :'no_of_business_authorised_persons' => :'Object',
        :'partnership_detail' => :'Object',
        :'private_entity_detail' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Colending::ResponseCreateTrancheBusinessData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Colending::ResponseCreateTrancheBusinessData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'business_pan_number')
        self.business_pan_number = attributes[:'business_pan_number']
      end

      if attributes.key?(:'business_pan_link')
        self.business_pan_link = attributes[:'business_pan_link']
      end

      if attributes.key?(:'business_pan_link_password')
        self.business_pan_link_password = attributes[:'business_pan_link_password']
      end

      if attributes.key?(:'business_rc_number')
        self.business_rc_number = attributes[:'business_rc_number']
      end

      if attributes.key?(:'business_rc_link')
        self.business_rc_link = attributes[:'business_rc_link']
      end

      if attributes.key?(:'business_rc_link_password')
        self.business_rc_link_password = attributes[:'business_rc_link_password']
      end

      if attributes.key?(:'business_gst_number')
        self.business_gst_number = attributes[:'business_gst_number']
      end

      if attributes.key?(:'business_gst_copy_link')
        self.business_gst_copy_link = attributes[:'business_gst_copy_link']
      end

      if attributes.key?(:'business_gst_copy_link_password')
        self.business_gst_copy_link_password = attributes[:'business_gst_copy_link_password']
      end

      if attributes.key?(:'business_udyog_aadhar_number')
        self.business_udyog_aadhar_number = attributes[:'business_udyog_aadhar_number']
      end

      if attributes.key?(:'business_udyog_aadhar_link')
        self.business_udyog_aadhar_link = attributes[:'business_udyog_aadhar_link']
      end

      if attributes.key?(:'business_udyog_aadhar_link_password')
        self.business_udyog_aadhar_link_password = attributes[:'business_udyog_aadhar_link_password']
      end

      if attributes.key?(:'business_ssi_number')
        self.business_ssi_number = attributes[:'business_ssi_number']
      end

      if attributes.key?(:'business_ssi_link')
        self.business_ssi_link = attributes[:'business_ssi_link']
      end

      if attributes.key?(:'business_ssi_link_password')
        self.business_ssi_link_password = attributes[:'business_ssi_link_password']
      end

      if attributes.key?(:'business_shops_est_number')
        self.business_shops_est_number = attributes[:'business_shops_est_number']
      end

      if attributes.key?(:'business_shops_est_link')
        self.business_shops_est_link = attributes[:'business_shops_est_link']
      end

      if attributes.key?(:'business_shops_est_link_password')
        self.business_shops_est_link_password = attributes[:'business_shops_est_link_password']
      end

      if attributes.key?(:'business_factory_regn_number')
        self.business_factory_regn_number = attributes[:'business_factory_regn_number']
      end

      if attributes.key?(:'business_factory_regn_link')
        self.business_factory_regn_link = attributes[:'business_factory_regn_link']
      end

      if attributes.key?(:'business_factory_regn_link_password')
        self.business_factory_regn_link_password = attributes[:'business_factory_regn_link_password']
      end

      if attributes.key?(:'business_trade_license_number')
        self.business_trade_license_number = attributes[:'business_trade_license_number']
      end

      if attributes.key?(:'business_trade_license_link')
        self.business_trade_license_link = attributes[:'business_trade_license_link']
      end

      if attributes.key?(:'business_trade_license_link_password')
        self.business_trade_license_link_password = attributes[:'business_trade_license_link_password']
      end

      if attributes.key?(:'business_place_photo_link')
        self.business_place_photo_link = attributes[:'business_place_photo_link']
      end

      if attributes.key?(:'business_place_photo_link_password')
        self.business_place_photo_link_password = attributes[:'business_place_photo_link_password']
      end

      if attributes.key?(:'business_continuity_proof_link')
        self.business_continuity_proof_link = attributes[:'business_continuity_proof_link']
      end

      if attributes.key?(:'business_continuity_proof_link_password')
        self.business_continuity_proof_link_password = attributes[:'business_continuity_proof_link_password']
      end

      if attributes.key?(:'other_business_address_proof_number')
        self.other_business_address_proof_number = attributes[:'other_business_address_proof_number']
      end

      if attributes.key?(:'other_business_address_proof_link')
        if (value = attributes[:'other_business_address_proof_link']).is_a?(Array)
          self.other_business_address_proof_link = value
        end
      end

      if attributes.key?(:'other_business_address_proof_link_password')
        self.other_business_address_proof_link_password = attributes[:'other_business_address_proof_link_password']
      end

      if attributes.key?(:'no_of_business_authorised_persons')
        self.no_of_business_authorised_persons = attributes[:'no_of_business_authorised_persons']
      end

      if attributes.key?(:'partnership_detail')
        self.partnership_detail = attributes[:'partnership_detail']
      end

      if attributes.key?(:'private_entity_detail')
        self.private_entity_detail = attributes[:'private_entity_detail']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          business_pan_number == o.business_pan_number &&
          business_pan_link == o.business_pan_link &&
          business_pan_link_password == o.business_pan_link_password &&
          business_rc_number == o.business_rc_number &&
          business_rc_link == o.business_rc_link &&
          business_rc_link_password == o.business_rc_link_password &&
          business_gst_number == o.business_gst_number &&
          business_gst_copy_link == o.business_gst_copy_link &&
          business_gst_copy_link_password == o.business_gst_copy_link_password &&
          business_udyog_aadhar_number == o.business_udyog_aadhar_number &&
          business_udyog_aadhar_link == o.business_udyog_aadhar_link &&
          business_udyog_aadhar_link_password == o.business_udyog_aadhar_link_password &&
          business_ssi_number == o.business_ssi_number &&
          business_ssi_link == o.business_ssi_link &&
          business_ssi_link_password == o.business_ssi_link_password &&
          business_shops_est_number == o.business_shops_est_number &&
          business_shops_est_link == o.business_shops_est_link &&
          business_shops_est_link_password == o.business_shops_est_link_password &&
          business_factory_regn_number == o.business_factory_regn_number &&
          business_factory_regn_link == o.business_factory_regn_link &&
          business_factory_regn_link_password == o.business_factory_regn_link_password &&
          business_trade_license_number == o.business_trade_license_number &&
          business_trade_license_link == o.business_trade_license_link &&
          business_trade_license_link_password == o.business_trade_license_link_password &&
          business_place_photo_link == o.business_place_photo_link &&
          business_place_photo_link_password == o.business_place_photo_link_password &&
          business_continuity_proof_link == o.business_continuity_proof_link &&
          business_continuity_proof_link_password == o.business_continuity_proof_link_password &&
          other_business_address_proof_number == o.other_business_address_proof_number &&
          other_business_address_proof_link == o.other_business_address_proof_link &&
          other_business_address_proof_link_password == o.other_business_address_proof_link_password &&
          no_of_business_authorised_persons == o.no_of_business_authorised_persons &&
          partnership_detail == o.partnership_detail &&
          private_entity_detail == o.private_entity_detail
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [business_pan_number, business_pan_link, business_pan_link_password, business_rc_number, business_rc_link, business_rc_link_password, business_gst_number, business_gst_copy_link, business_gst_copy_link_password, business_udyog_aadhar_number, business_udyog_aadhar_link, business_udyog_aadhar_link_password, business_ssi_number, business_ssi_link, business_ssi_link_password, business_shops_est_number, business_shops_est_link, business_shops_est_link_password, business_factory_regn_number, business_factory_regn_link, business_factory_regn_link_password, business_trade_license_number, business_trade_license_link, business_trade_license_link_password, business_place_photo_link, business_place_photo_link_password, business_continuity_proof_link, business_continuity_proof_link_password, other_business_address_proof_number, other_business_address_proof_link, other_business_address_proof_link_password, no_of_business_authorised_persons, partnership_detail, private_entity_detail].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Colending.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
