=begin
#Allcloud (Allcloud)

## Integration Document  The following are the endpoints to be called during and pre/post disbursement state of a loan.  ## Authentication  Authentication details and host will be shared privately.  ## Workflow  **Create Loan** is the initial endpoint to be called to create a loan. Loan will be processed in the background and the status of loan will be provided through the configured Webhook. However, the client can also poll the server via the **Get Loan Details** endpoint to know the loan's status(**Get Loan Details** is rate throttled and polling this API will be restricted). Loan's shall be considered rejected if proper response is not available within 10minutes.  All other endpoints are self-explanatory and can be retried upto 3 times before marking as failure.  ## Allowed Links  All Link attributes should contain 1. Accessible File Link URL which can be Public/Expiry URL/Whitelisted File Server Link(Write to tech.colending@credavenue.com for obtaining our IP address to whitelist) 2. File Link URL with Header Authentication (Header values should be shared with tech.colending@credavenue.com)  ## Allowed Fields Length <table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">  <colgroup>  <col  class=\"org-left\" />  <col  class=\"org-left\" />  </colgroup> <thead> <tr> <th scope=\"col\" class=\"org-left\">Data Type</th> <th scope=\"col\" class=\"org-left\">Max Length</th> </tr> </thead>  <tbody> <tr> <td class=\"org-left\">String</td> <td class=\"org-left\">65,535 bytes</td> </tr>  <tr> <td class=\"org-left\">Float</td> <td class=\"org-left\">8 bytes</td> </tr>  <tr> <td class=\"org-left\">Integer</td> <td class=\"org-left\">4 bytes</td> </tr>  <tr> <td class=\"org-left\">Date</td> <td class=\"org-left\">10 characters</td> </tr>  </tbody> </table>  # Webhooks  Webhooks can be configured for the below events  1. Loan status change      Response Payload :      {         \"product_id\": \"\",         \"client_loan_id\": \"\",         \"principal_amount\": \"\",         \"interest_rate\": \"\",         \"tenure\": \"\",         \"tenure_frequency\": \"MONTHLY\",         \"cibil_score\": \"\",         \"purpose\": \"\",         \"repayment_frequency\":\"\",         \"number_of_repayments\": \"\",         \"status\": \"\",         \"principal_outstanding\": \"\",         \"reject_reason\": \"\"     }          Statuses : ['new', 'approved', 'rejected', 'agreement_signed', 'dropped', 'disbursement_ready', 'disbursed', 'matured', 'partner_settled']     2. Loan disbursement details (Disbursed through razorpay)      Callback Payload:      {         \"client_loan_id\":\"\",         \"status\":\"borrower_disbursed\",         \"disbursed_date\":\"\",         \"utr_number\":\"\",         \"disbursement_type\":\"\",         \"payment_reversed\": \"TRUE/FALSE\",         \"disbursement_amount\":\"\",         \"investor_disbursed_amount\": \"\",         \"partner_disbursed_amount\": \"\",         \"differential_interest\":\"\",         \"investor_differential_interest\":\"\",         \"partner_differential_interest\":\"\",         \"differential_days\":\"\",         \"interest_start_date\":\"\",         \"investor_processing_fee\":\"\",         \"partner_processing_fee\":\"\",         \"investor_stamp_duty\":\"\",         \"partner_stamp_duty\":\"\",         \"investor_documentation_charges\":\"\",         \"partner_documentation_charges\":\"\"     }  Provide the following details to configure the webhooks 1. callback URL 2. authentication for the callback URL (header authentication)    # Validations  **PAN**  - **Example**: ABGPA1232P - **Sequence**: First five digits will be alpha, next four will be Numerical and again last single digit will be alpha  **GSTIN**  - **Example**: 33AAACT2727Q1ZV - **Sequence**: First two digits is Numerical, Next is PAN sequence as specified above, again thirteenth digit will be numerical, fourteenth digit is alpha, last digit will be alpha or numerical  **CIN**  - **Example**: U65929TN2017PTC117196 - **Sequence**: First digit is Alpha, next 5 numeric digits, next two alpha, next set of 4 numeric digits, Next 3 alpha, last 6 numeric digits  **PASSPORT**  - **Example**: A2096457 - **Sequence**: Total 8 digits, first digit is Alpha, remaining digits are numerical  **AADHAR NO**  - The standard 12 digits numerical.  **MOBILE NO**  - **Sequence**: 10 numerical digits  **IFSC CODE**  - **Example**: PUNB0596600 - **Sequence**: First four alpha, next fifth digit is 0 (zero) always and last six digit is alpha/numeric. Totally 11 digits.  **PIN CODE**  - 6 numerical digits

OpenAPI spec version: 0.0.1
Contact: support@colending.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module Colending
  # Refer table CoApplicants for attributes
  class BodyUpdatePostDisbursementCoApplicants
    # Father/Mother/Brother/Son/Daughter/Friend/Other relative
    attr_accessor :relationship_with_applicant

    # First Name of the CoApplicant
    attr_accessor :first_name

    # Middle Name of the CoApplicant
    attr_accessor :middle_name

    # Last Name of the CoApplicant
    attr_accessor :last_name

    # M / F / O
    attr_accessor :gender

    # Date of Birth (YYYY-MM-DD)
    attr_accessor :date_of_birth

    # Age in years
    attr_accessor :age

    # Mobile Number of the CoApplicant (10 digits)
    attr_accessor :mobile_number

    # Personal Email ID of the CoApplicant
    attr_accessor :email

    # Free flowing text
    attr_accessor :current_address

    # City in which CoApplicant is currently residing
    attr_accessor :current_city

    # District in which CoApplicant is currently residing
    attr_accessor :current_district

    # State in which CoApplicant is currently residing
    attr_accessor :current_state

    # Pincode of the current address
    attr_accessor :current_pincode

    # rented / owned / leased
    attr_accessor :residence_type_current_address

    # How many years stayed in the current address
    attr_accessor :years_of_stay_in_current_address

    # Free flowing text
    attr_accessor :permanent_address

    # City in which CoApplicant is currently residing
    attr_accessor :permanent_city

    # District in which CoApplicant is currently residing
    attr_accessor :permanent_district

    # State in which CoApplicant is currently residing
    attr_accessor :permanent_state

    # Pincode of the current address
    attr_accessor :permanent_pincode

    # rented / owned / leased
    attr_accessor :residence_type_permanent_address

    # How many years stayed in the permanent address
    attr_accessor :years_of_stay_in_permanent_address

    # Married / Unmarried
    attr_accessor :marital_status

    # Religion of the CoApplicant
    attr_accessor :religion

    # Nationality of the CoApplicant
    attr_accessor :nationality

    # Father Name of the CoApplicant
    attr_accessor :father_name

    # Mother Name of the CoApplicant
    attr_accessor :mother_name

    # Spouse Name of the CoApplicant
    attr_accessor :spouse_name

    # Free flowing text
    attr_accessor :education

    # Annual Income of the CoApplicant (in Rupees)
    attr_accessor :annual_income

    # CoApplicant Income Proof Link
    attr_accessor :income_proof_link

    # CoApplicant Bank Statement Link
    attr_accessor :bank_statement_12_months_link

    # PAN Number of the CoApplicant (10 digit Alphanumeric)
    attr_accessor :pan_number

    # PAN Document Link
    attr_accessor :pan_link

    # Aadhar Number of the CoApplicant (12 digits)
    attr_accessor :aadhar_number

    # Aadhar Document Link
    attr_accessor :aadhar_link

    # Voter ID Number of the CoApplicant
    attr_accessor :voter_id_number

    # Voter Document Link
    attr_accessor :voting_id_link

    # Driving License Number of the CoApplicant
    attr_accessor :driving_license_number

    # Driving License Document Link
    attr_accessor :driving_license_link

    # Passport Number of the CoApplicant
    attr_accessor :passport_number

    # Passport Document Link
    attr_accessor :passport_link

    # Video KYC of the CoApplicant
    attr_accessor :video_kyc_link

    # Required if video KYC is done. Profile ID of the case as per the video KYC vendor
    attr_accessor :video_kyc_profile_id

    # Required if video KYC is done. Account ID of the case as per the video KYC vendor
    attr_accessor :video_kyc_account_id

    # Required if video KYC is done. Key as per the video KYC vendor
    attr_accessor :video_kyc_key

    # KYC Number of the CoApplicant
    attr_accessor :other_kyc_number

    # KYC Image of the CoApplicant
    attr_accessor :other_kyc_link

    # CoApplicant Rent Agreement Document Link
    attr_accessor :rent_agreement_link

    # Utility Bills Copies (If any)
    attr_accessor :utility_bills_link

    # Photo Image of the CoApplicant
    attr_accessor :photo_link

    # Bureau Score of the CoApplicant
    attr_accessor :bureau_score

    # CoApplicant&#39;s Bureau Report Link
    attr_accessor :bureau_report_link

    # Score Captured by the Partner
    attr_accessor :partner_score

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'relationship_with_applicant' => :'relationship_with_applicant',
        :'first_name' => :'first_name',
        :'middle_name' => :'middle_name',
        :'last_name' => :'last_name',
        :'gender' => :'gender',
        :'date_of_birth' => :'date_of_birth',
        :'age' => :'age',
        :'mobile_number' => :'mobile_number',
        :'email' => :'email',
        :'current_address' => :'current_address',
        :'current_city' => :'current_city',
        :'current_district' => :'current_district',
        :'current_state' => :'current_state',
        :'current_pincode' => :'current_pincode',
        :'residence_type_current_address' => :'residence_type_current_address',
        :'years_of_stay_in_current_address' => :'years_of_stay_in_current_address',
        :'permanent_address' => :'permanent_address',
        :'permanent_city' => :'permanent_city',
        :'permanent_district' => :'permanent_district',
        :'permanent_state' => :'permanent_state',
        :'permanent_pincode' => :'permanent_pincode',
        :'residence_type_permanent_address' => :'residence_type_permanent_address',
        :'years_of_stay_in_permanent_address' => :'years_of_stay_in_permanent_address',
        :'marital_status' => :'marital_status',
        :'religion' => :'religion',
        :'nationality' => :'nationality',
        :'father_name' => :'father_name',
        :'mother_name' => :'mother_name',
        :'spouse_name' => :'spouse_name',
        :'education' => :'education',
        :'annual_income' => :'annual_income',
        :'income_proof_link' => :'income_proof_link',
        :'bank_statement_12_months_link' => :'bank_statement_12_months_link',
        :'pan_number' => :'pan_number',
        :'pan_link' => :'pan_link',
        :'aadhar_number' => :'aadhar_number',
        :'aadhar_link' => :'aadhar_link',
        :'voter_id_number' => :'voter_id_number',
        :'voting_id_link' => :'voting_id_link',
        :'driving_license_number' => :'driving_license_number',
        :'driving_license_link' => :'driving_license_link',
        :'passport_number' => :'passport_number',
        :'passport_link' => :'passport_link',
        :'video_kyc_link' => :'video_kyc_link',
        :'video_kyc_profile_id' => :'video_kyc_profile_id',
        :'video_kyc_account_id' => :'video_kyc_account_id',
        :'video_kyc_key' => :'video_kyc_key',
        :'other_kyc_number' => :'other_kyc_number',
        :'other_kyc_link' => :'other_kyc_link',
        :'rent_agreement_link' => :'rent_agreement_link',
        :'utility_bills_link' => :'utility_bills_link',
        :'photo_link' => :'photo_link',
        :'bureau_score' => :'bureau_score',
        :'bureau_report_link' => :'bureau_report_link',
        :'partner_score' => :'partner_score'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'relationship_with_applicant' => :'Object',
        :'first_name' => :'Object',
        :'middle_name' => :'Object',
        :'last_name' => :'Object',
        :'gender' => :'Object',
        :'date_of_birth' => :'Object',
        :'age' => :'Object',
        :'mobile_number' => :'Object',
        :'email' => :'Object',
        :'current_address' => :'Object',
        :'current_city' => :'Object',
        :'current_district' => :'Object',
        :'current_state' => :'Object',
        :'current_pincode' => :'Object',
        :'residence_type_current_address' => :'Object',
        :'years_of_stay_in_current_address' => :'Object',
        :'permanent_address' => :'Object',
        :'permanent_city' => :'Object',
        :'permanent_district' => :'Object',
        :'permanent_state' => :'Object',
        :'permanent_pincode' => :'Object',
        :'residence_type_permanent_address' => :'Object',
        :'years_of_stay_in_permanent_address' => :'Object',
        :'marital_status' => :'Object',
        :'religion' => :'Object',
        :'nationality' => :'Object',
        :'father_name' => :'Object',
        :'mother_name' => :'Object',
        :'spouse_name' => :'Object',
        :'education' => :'Object',
        :'annual_income' => :'Object',
        :'income_proof_link' => :'Object',
        :'bank_statement_12_months_link' => :'Object',
        :'pan_number' => :'Object',
        :'pan_link' => :'Object',
        :'aadhar_number' => :'Object',
        :'aadhar_link' => :'Object',
        :'voter_id_number' => :'Object',
        :'voting_id_link' => :'Object',
        :'driving_license_number' => :'Object',
        :'driving_license_link' => :'Object',
        :'passport_number' => :'Object',
        :'passport_link' => :'Object',
        :'video_kyc_link' => :'Object',
        :'video_kyc_profile_id' => :'Object',
        :'video_kyc_account_id' => :'Object',
        :'video_kyc_key' => :'Object',
        :'other_kyc_number' => :'Object',
        :'other_kyc_link' => :'Object',
        :'rent_agreement_link' => :'Object',
        :'utility_bills_link' => :'Object',
        :'photo_link' => :'Object',
        :'bureau_score' => :'Object',
        :'bureau_report_link' => :'Object',
        :'partner_score' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Colending::BodyUpdatePostDisbursementCoApplicants` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Colending::BodyUpdatePostDisbursementCoApplicants`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'relationship_with_applicant')
        self.relationship_with_applicant = attributes[:'relationship_with_applicant']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      end

      if attributes.key?(:'age')
        self.age = attributes[:'age']
      end

      if attributes.key?(:'mobile_number')
        self.mobile_number = attributes[:'mobile_number']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'current_address')
        self.current_address = attributes[:'current_address']
      end

      if attributes.key?(:'current_city')
        self.current_city = attributes[:'current_city']
      end

      if attributes.key?(:'current_district')
        self.current_district = attributes[:'current_district']
      end

      if attributes.key?(:'current_state')
        self.current_state = attributes[:'current_state']
      end

      if attributes.key?(:'current_pincode')
        self.current_pincode = attributes[:'current_pincode']
      end

      if attributes.key?(:'residence_type_current_address')
        self.residence_type_current_address = attributes[:'residence_type_current_address']
      end

      if attributes.key?(:'years_of_stay_in_current_address')
        self.years_of_stay_in_current_address = attributes[:'years_of_stay_in_current_address']
      end

      if attributes.key?(:'permanent_address')
        self.permanent_address = attributes[:'permanent_address']
      end

      if attributes.key?(:'permanent_city')
        self.permanent_city = attributes[:'permanent_city']
      end

      if attributes.key?(:'permanent_district')
        self.permanent_district = attributes[:'permanent_district']
      end

      if attributes.key?(:'permanent_state')
        self.permanent_state = attributes[:'permanent_state']
      end

      if attributes.key?(:'permanent_pincode')
        self.permanent_pincode = attributes[:'permanent_pincode']
      end

      if attributes.key?(:'residence_type_permanent_address')
        self.residence_type_permanent_address = attributes[:'residence_type_permanent_address']
      end

      if attributes.key?(:'years_of_stay_in_permanent_address')
        self.years_of_stay_in_permanent_address = attributes[:'years_of_stay_in_permanent_address']
      end

      if attributes.key?(:'marital_status')
        self.marital_status = attributes[:'marital_status']
      end

      if attributes.key?(:'religion')
        self.religion = attributes[:'religion']
      end

      if attributes.key?(:'nationality')
        self.nationality = attributes[:'nationality']
      end

      if attributes.key?(:'father_name')
        self.father_name = attributes[:'father_name']
      end

      if attributes.key?(:'mother_name')
        self.mother_name = attributes[:'mother_name']
      end

      if attributes.key?(:'spouse_name')
        self.spouse_name = attributes[:'spouse_name']
      end

      if attributes.key?(:'education')
        self.education = attributes[:'education']
      end

      if attributes.key?(:'annual_income')
        self.annual_income = attributes[:'annual_income']
      end

      if attributes.key?(:'income_proof_link')
        if (value = attributes[:'income_proof_link']).is_a?(Array)
          self.income_proof_link = value
        end
      end

      if attributes.key?(:'bank_statement_12_months_link')
        if (value = attributes[:'bank_statement_12_months_link']).is_a?(Array)
          self.bank_statement_12_months_link = value
        end
      end

      if attributes.key?(:'pan_number')
        self.pan_number = attributes[:'pan_number']
      end

      if attributes.key?(:'pan_link')
        if (value = attributes[:'pan_link']).is_a?(Array)
          self.pan_link = value
        end
      end

      if attributes.key?(:'aadhar_number')
        self.aadhar_number = attributes[:'aadhar_number']
      end

      if attributes.key?(:'aadhar_link')
        if (value = attributes[:'aadhar_link']).is_a?(Array)
          self.aadhar_link = value
        end
      end

      if attributes.key?(:'voter_id_number')
        self.voter_id_number = attributes[:'voter_id_number']
      end

      if attributes.key?(:'voting_id_link')
        if (value = attributes[:'voting_id_link']).is_a?(Array)
          self.voting_id_link = value
        end
      end

      if attributes.key?(:'driving_license_number')
        self.driving_license_number = attributes[:'driving_license_number']
      end

      if attributes.key?(:'driving_license_link')
        if (value = attributes[:'driving_license_link']).is_a?(Array)
          self.driving_license_link = value
        end
      end

      if attributes.key?(:'passport_number')
        self.passport_number = attributes[:'passport_number']
      end

      if attributes.key?(:'passport_link')
        if (value = attributes[:'passport_link']).is_a?(Array)
          self.passport_link = value
        end
      end

      if attributes.key?(:'video_kyc_link')
        if (value = attributes[:'video_kyc_link']).is_a?(Array)
          self.video_kyc_link = value
        end
      end

      if attributes.key?(:'video_kyc_profile_id')
        self.video_kyc_profile_id = attributes[:'video_kyc_profile_id']
      end

      if attributes.key?(:'video_kyc_account_id')
        self.video_kyc_account_id = attributes[:'video_kyc_account_id']
      end

      if attributes.key?(:'video_kyc_key')
        self.video_kyc_key = attributes[:'video_kyc_key']
      end

      if attributes.key?(:'other_kyc_number')
        self.other_kyc_number = attributes[:'other_kyc_number']
      end

      if attributes.key?(:'other_kyc_link')
        if (value = attributes[:'other_kyc_link']).is_a?(Array)
          self.other_kyc_link = value
        end
      end

      if attributes.key?(:'rent_agreement_link')
        if (value = attributes[:'rent_agreement_link']).is_a?(Array)
          self.rent_agreement_link = value
        end
      end

      if attributes.key?(:'utility_bills_link')
        if (value = attributes[:'utility_bills_link']).is_a?(Array)
          self.utility_bills_link = value
        end
      end

      if attributes.key?(:'photo_link')
        if (value = attributes[:'photo_link']).is_a?(Array)
          self.photo_link = value
        end
      end

      if attributes.key?(:'bureau_score')
        self.bureau_score = attributes[:'bureau_score']
      end

      if attributes.key?(:'bureau_report_link')
        if (value = attributes[:'bureau_report_link']).is_a?(Array)
          self.bureau_report_link = value
        end
      end

      if attributes.key?(:'partner_score')
        self.partner_score = attributes[:'partner_score']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          relationship_with_applicant == o.relationship_with_applicant &&
          first_name == o.first_name &&
          middle_name == o.middle_name &&
          last_name == o.last_name &&
          gender == o.gender &&
          date_of_birth == o.date_of_birth &&
          age == o.age &&
          mobile_number == o.mobile_number &&
          email == o.email &&
          current_address == o.current_address &&
          current_city == o.current_city &&
          current_district == o.current_district &&
          current_state == o.current_state &&
          current_pincode == o.current_pincode &&
          residence_type_current_address == o.residence_type_current_address &&
          years_of_stay_in_current_address == o.years_of_stay_in_current_address &&
          permanent_address == o.permanent_address &&
          permanent_city == o.permanent_city &&
          permanent_district == o.permanent_district &&
          permanent_state == o.permanent_state &&
          permanent_pincode == o.permanent_pincode &&
          residence_type_permanent_address == o.residence_type_permanent_address &&
          years_of_stay_in_permanent_address == o.years_of_stay_in_permanent_address &&
          marital_status == o.marital_status &&
          religion == o.religion &&
          nationality == o.nationality &&
          father_name == o.father_name &&
          mother_name == o.mother_name &&
          spouse_name == o.spouse_name &&
          education == o.education &&
          annual_income == o.annual_income &&
          income_proof_link == o.income_proof_link &&
          bank_statement_12_months_link == o.bank_statement_12_months_link &&
          pan_number == o.pan_number &&
          pan_link == o.pan_link &&
          aadhar_number == o.aadhar_number &&
          aadhar_link == o.aadhar_link &&
          voter_id_number == o.voter_id_number &&
          voting_id_link == o.voting_id_link &&
          driving_license_number == o.driving_license_number &&
          driving_license_link == o.driving_license_link &&
          passport_number == o.passport_number &&
          passport_link == o.passport_link &&
          video_kyc_link == o.video_kyc_link &&
          video_kyc_profile_id == o.video_kyc_profile_id &&
          video_kyc_account_id == o.video_kyc_account_id &&
          video_kyc_key == o.video_kyc_key &&
          other_kyc_number == o.other_kyc_number &&
          other_kyc_link == o.other_kyc_link &&
          rent_agreement_link == o.rent_agreement_link &&
          utility_bills_link == o.utility_bills_link &&
          photo_link == o.photo_link &&
          bureau_score == o.bureau_score &&
          bureau_report_link == o.bureau_report_link &&
          partner_score == o.partner_score
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [relationship_with_applicant, first_name, middle_name, last_name, gender, date_of_birth, age, mobile_number, email, current_address, current_city, current_district, current_state, current_pincode, residence_type_current_address, years_of_stay_in_current_address, permanent_address, permanent_city, permanent_district, permanent_state, permanent_pincode, residence_type_permanent_address, years_of_stay_in_permanent_address, marital_status, religion, nationality, father_name, mother_name, spouse_name, education, annual_income, income_proof_link, bank_statement_12_months_link, pan_number, pan_link, aadhar_number, aadhar_link, voter_id_number, voting_id_link, driving_license_number, driving_license_link, passport_number, passport_link, video_kyc_link, video_kyc_profile_id, video_kyc_account_id, video_kyc_key, other_kyc_number, other_kyc_link, rent_agreement_link, utility_bills_link, photo_link, bureau_score, bureau_report_link, partner_score].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Colending.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
